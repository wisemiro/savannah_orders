// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: products.sql

package db

import (
	"context"
)

const createProduct = `-- name: CreateProduct :exec
insert into products (created_at, name, price)
values(current_timestamp, $1, $2)
`

type CreateProductParams struct {
	Name  string `json:"name"`
	Price int32  `json:"price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.db.Exec(ctx, createProduct, arg.Name, arg.Price)
	return err
}

const deleteProduct = `-- name: DeleteProduct :exec
update products
set deleted_at = current_timestamp
where id = $1
    and deleted_at is null
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
select id, created_at, updated_at, deleted_at, name, price
from products
where id = $1
and deleted_at is not null
`

func (q *Queries) GetProduct(ctx context.Context, id int32) (*Products, error) {
	row := q.db.QueryRow(ctx, getProduct, id)
	var i Products
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Price,
	)
	return &i, err
}

const listProducts = `-- name: ListProducts :many
select id, created_at, updated_at, deleted_at, name, price
from products
where deleted_at is null
`

func (q *Queries) ListProducts(ctx context.Context) ([]*Products, error) {
	rows, err := q.db.Query(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Products{}
	for rows.Next() {
		var i Products
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
update products
set updated_at = current_timestamp,
    name = $1,
    price = $2
where id = $3
    and deleted_at is null
`

type UpdateProductParams struct {
	Name  string `json:"name"`
	Price int32  `json:"price"`
	ID    int32  `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.Exec(ctx, updateProduct, arg.Name, arg.Price, arg.ID)
	return err
}
