// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: customers.sql

package db

import (
	"context"
)

const createCustomer = `-- name: CreateCustomer :exec
insert into customers (created_at, phone_number, token)
values(current_timestamp, $1, $2)
`

type CreateCustomerParams struct {
	PhoneNumber string `json:"phone_number"`
	Token       string `json:"token"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) error {
	_, err := q.db.Exec(ctx, createCustomer, arg.PhoneNumber, arg.Token)
	return err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
update customers
set deleted_at = current_timestamp
where id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCustomer, id)
	return err
}

const getCustomer = `-- name: GetCustomer :one
select id, created_at, updated_at, deleted_at, phone_number, token
from customers
where phone_number = $1
    and deleted_at is not null
`

func (q *Queries) GetCustomer(ctx context.Context, phoneNumber string) (*Customers, error) {
	row := q.db.QueryRow(ctx, getCustomer, phoneNumber)
	var i Customers
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.PhoneNumber,
		&i.Token,
	)
	return &i, err
}

const listCustomers = `-- name: ListCustomers :many
select id, created_at, updated_at, deleted_at, phone_number, token
from customers
where deleted_at is not null
`

func (q *Queries) ListCustomers(ctx context.Context) ([]*Customers, error) {
	rows, err := q.db.Query(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Customers{}
	for rows.Next() {
		var i Customers
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.PhoneNumber,
			&i.Token,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :exec
update customers
set phone_number = $1
where id = $2
    and deleted_at is not null
`

type UpdateCustomerParams struct {
	PhoneNumber string `json:"phone_number"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.Exec(ctx, updateCustomer, arg.PhoneNumber, arg.ID)
	return err
}
