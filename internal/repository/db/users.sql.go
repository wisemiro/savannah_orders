// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
insert into users (created_at, user_name, token)
values(current_timestamp, $1, $2)
`

type CreateUserParams struct {
	UserName string `json:"user_name"`
	Token    string `json:"token"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.UserName, arg.Token)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
update users
set deleted_at = current_timestamp
where id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
select id, created_at, updated_at, deleted_at, user_name, token
from users
where user_name = $1
    and deleted_at is null
`

func (q *Queries) GetUser(ctx context.Context, userName string) (*Users, error) {
	row := q.db.QueryRow(ctx, getUser, userName)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserName,
		&i.Token,
	)
	return &i, err
}

const listUsers = `-- name: ListUsers :many
select id, created_at, updated_at, deleted_at, user_name, token
from users
where deleted_at is null
`

func (q *Queries) ListUsers(ctx context.Context) ([]*Users, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Users{}
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UserName,
			&i.Token,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
update users
set user_name = $1
where id = $2
    and deleted_at is null
`

type UpdateUserParams struct {
	UserName string `json:"user_name"`
	ID       int32  `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.UserName, arg.ID)
	return err
}
